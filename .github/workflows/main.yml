name: RDP

on:

workflow_dispatch:

jobs:

secure-rdp:

runs-on: windows-latest

timeout-minutes: 3600

steps:

- name: Configure Core RDP Settings

run:

#Enable Remote Desktop and disable Network Level Authentication (if needed)

Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Cont rol\Terminal Server

-Name "IDenyTSConnections"-Value 0-Force

Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Cont rol Terminal Server\WinStations\RDP-

Tcp

-Name "UserAuthentication" -Value 0 Force

Set-ItemProperty -Path HKLM:\System\CurrentControlSet\Cont rol\Terminal Server\WinStations\RDP-

Tcp

-Name "SecurityLayer"-Value O-Force

#Remove any existing rule with the same name to avoid duplication

netsh advfirewall firewall delete rule name="RDP-Tailscale"

#For testing, allow any incoming connection on port 3389

netsh advfirewall firewall add rule name="RDP-Tallscale"" dir=in action=allow localport=3389 protocol=TCP

#(Optional) Restart the Remote Desktop service to ensure changes take effect

Restart-Service -Name TermService Force

name: Create RDP User with Secure Password

run:

Add-Type -AssemblyName System.Security $charSet = @{

Upper [char[]] (65.90) #A-Z Lower = [char[]] (97..122) #3-2 Number [char[]] (48..57) #0-9

Special

= ([char[]] (33.47)

[char](58..64) +

[char[]] (91.96) + (char[]] (123..126)) # Special characters

}

$rawPassword = @() $rawPassword += $charSet.Upper | Get-Random-Count 4

$rawPassword += $charSet.Lower | Get-Random-Count 4

$rawPassword += $charSet.Number | Get-Random-Count 4

$rawPassword += $charSet.Special | Get -Random-Count 4

$password=-join ($rawPassword | Sort-

Object {Get-Random))

$securePass ConvertTo-SecureString $password-AsPlainText-Force

New-LocalUser-Name "RDP" -Password $securePass-AccountNeverExpires

Add-LocalGroupMember

-Group

"Administrators" -Member "RDP" Add-LocalGroupMember -Group

"Remote Desktop Users" -Member "RDP"

"RDP CREDS=User: RDP 1 echo

Password: $password" $env:GITHUB_ENV

if (not (Get-LocalUser-Name "RDP")) { Write-Error "User creation failed" exit 1

- name: Install Tailscale

run: |

$tsUrl

"https://pkgs.tailscale.com/stable/tailsc

ale-setup-1.82.0-amd64.msi"

$installerPath

"$env:TEMP\tailscale.msi

Invoke-WebRequest -Uri $tsUri-OutFile

$installerPath

Start-Process msiexec.exe ArgumentList "/", """$installerPath",

"/quiet", "/norestart"-Wait

Remove-Item $installerPath -Force

- name: Establish Tailscale Connection

run:

#Bring up Tailscale with the provided auth key and set a unique hostname

"$env:ProgramFiles\Tallscale\tailscale.e

xe

up

authkey=$({ secrets.TAILSCALE_AUTH_ KEY }} --hostname-gh-runner-$env:GITHUB_RUN_ID

#Wait for Tailscale to assign an IP

$tsIP = $null

$retries O

while (-not $tsIP-and $retries-It 10) { $tsiP

&

"$env:Program Files\Tailscale\taliscale.e

xe" ip -4

Start-Sleep-Seconds 5

$retries++

if (-not $tsiP) (

Write-Error "Tailscale IP not assigned.

Exiting." exit 1

}

echo TAILSCALE_IP=$tsiP" $env:GITHUB_ENV

- name: Verify RDP Accessibility

run: |

Write-Host

$env:TAILSCALE_IP

Tailscale

IP:

#Test connectivity using Test-NetConnection against the Taliscale IP on

port 3389

Test-NetConnection $testResult

ComputerName $env:TAILSCALE_IP Port 3389

if (-not $testResult.TopTestSucceeded) ( Write-Error "TCP connection to RDP port 3389 failed

exit 1

}

Write-Host "TCP connectivity successful!"

- name: Maintain Connection

run: |

Write-Host "n=== RDP ACCESS ===" Write-Host "Address:

$env:TAILSCALE_IP"

Write-Host "Username: RDP "Password:

Write-Host $env:RDP CREDS)" Write-Host "====== $(echo ====='n"

#Keep runner active indefinitely (or until

manually cancelled)

while ($true) {

Write-Host "[$(Get-Date)] RDP Active -Use Ctrl+C in workflow to terminate" Start-Sleep-Seconds 300

}
